options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< ELSEIF: "else if" > |
	< STRING: "string" > |
	< TYPE: < INT > | < CHAR > | < BOOLEAN > > |
	< #INT: "int" > |
	< FLOAT: "float" > |
	< BOOL: "bool" > |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" > |
	< CLASS: "class" > |
	< #CHAR: "char" >  |
	< #BOOLEAN: "boolean" >
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN:  "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" > |
	< SINGLEQUOTE: "'" >
	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
    < REAL: (<INTEGER>)* "." (<INTEGER>)* (("e" | "E") "+" (<INTEGER>)*)? > //TODO
}




//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 ( Stmt() )*
}


void Stmt() : { }
{
	AssignStmt() <SEMICOLON> |
	IfStmt() | ClassStmt()
}

void AssignStmt() : { Token t;}
{
	Identifier() <ASSIGN> Expr()
}

void Expr() : {}
{
    //BasicExpr()
    AndOrExpr()
}

void BasicExpr() : {}
{
	LOOKAHEAD(2) Identifier() |
	IntValue() |
	RealValue()
}

void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}

//TODO  SIMPLIFY
void IfStmt() : { }
{
    <IF> <LPAREN> Expr() <RPAREN>
    ((Stmt() | <LACC> Block() <RACC>)
    (LOOKAHEAD(2) <ELSEIF> <LPAREN> Expr() <RPAREN> ((<LACC> Block() <RACC>) | Stmt()))*
    [LOOKAHEAD(2) <ELSE> (Stmt() | <LACC> Block() <RACC>) ])
}

void AndOrExpr() #void : { }
{
    (CompExpr() (<LOGIC> CompExpr())*)#OperateurLogique(>1)
}

void CompExpr() #void : { }
{
    (AddExpr() (<COMPARE> AddExpr())*)#OperateurComparaison(>1)
}

void AddExpr() #void : { }
{
    (MulExpr() ((<PLUS> | <MINUS>) MulExpr())*)#AdditionSoustraction(>1)
}

void MulExpr() #void : { }
{
    (NegationExpr() ((<FOIS> | <DIV>) NegationExpr())*)#MultiplicationDivison(>1)
}

void NegationExpr() #void : { }
{
    ((<MINUS>)*)#Negation(>1) NotExpr()
}

void NotExpr() #void : { }
{
    ((<NOT>)*)#Not(>1) ParExpr()
}

void ParExpr() #void : { }
{
   (<LPAREN> Expr() <RPAREN>) | BasicExpr()
}

void ClassStmt() : { }
{
    <CLASS> Identifier() <LACC> ClassDeclaration() <RACC>
}

void ClassDeclaration() : { }
{
    (ClassStmt() | LOOKAHEAD(3) AttributDeclaration() | MethodDeclaration())*
}

void AttributDeclaration() : { }
{
    <TYPE>
    ([<COMMA>] Identifier() [<ASSIGN> [<SINGLEQUOTE>] Expr() [<SINGLEQUOTE>]])*
    <SEMICOLON>
}

void MethodDeclaration() : { }
{
    MethodSignature() <LACC> Block() <RACC>
}

void MethodSignature() : { }
{
    <TYPE> Identifier() <LPAREN> (<TYPE> Identifier() [<COMMA>])* <RPAREN>
}